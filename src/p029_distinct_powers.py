"""
Problem 29: Distinct powers
https://projecteuler.net/problem=29

Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:
22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125

If they are then placed in numerical order, with any repeats removed,
we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence
generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?
"""
# pylint: disable=invalid-name

from typing import Iterable

from src.common.calculations import calculate_large_product


def get_power_sequence(max_a: int, max_b: int) -> Iterable[str]:
    """Get the power `a^b` for `2 <= a <= max_a` and `2 <= b <= 100` as a string iterable."""
    for a in range(2, max_a + 1):
        power = str(a)
        for _ in range(2, max_b + 1):
            power = calculate_large_product(power, str(a))
            yield power


def main() -> None:
    """Main function."""
    max_a = 100
    max_b = 100

    distinct_terms = set(get_power_sequence(max_a, max_b))
    print(f'The number of distinct terms in the sequence generated by a^b ' \
          f'for 2 <= a <= {max_a} and 2 <= b <= {max_b} is {len(distinct_terms):,}.')


if __name__ == '__main__':
    main()
