"""
Problem 44: Pentagon numbers
https://projecteuler.net/problem=44

Pentagonal numbers are generated by the formula, P_n=n*(3n−1)/2.
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P_4 + P_7 = 22 + 70 = 92 = P8.
However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P_j and P_k,
for which their sum and difference are pentagonal and D = |P_k − P_j| is minimised;
what is the value of D?
"""

from typing import Iterable, Tuple
from heapq import heappush, heappop

from src.common.special_numbers import get_pentagonal_number, is_pentagonal_number


def _get_sorted_pentagonal_number_pairs() -> Iterable[Tuple[int, int]]:
    """Get pairs of pentPentagonalagonal numbers, sorted by their difference."""
    prio_q = []
    heappush(prio_q, (0, (1, 2)))
    while True:
        _, value = heappop(prio_q)
        j, k = value
        p_j = get_pentagonal_number(j)
        p_k = get_pentagonal_number(k)
        yield (p_j, p_k)
        if j == k - 1:
            p_new_k = get_pentagonal_number(k + 1)
            heappush(prio_q, (p_new_k - p_k, (k, k + 1)))
        if j > 1:
            p_new_j = get_pentagonal_number(j - 1)
            heappush(prio_q, (p_k - p_new_j, (j - 1, k)))


def _get_special_sorted_pentagonal_number_pairs() -> Iterable[Tuple[int, int]]:
    """Get special Pentagonal number pairs (P_j, P_k),
    for which their sum and difference are pentagonal."""
    for p_j, p_k in _get_sorted_pentagonal_number_pairs():
        if is_pentagonal_number(p_k + p_j) and is_pentagonal_number(p_k - p_j):
            yield (p_j, p_k)


def main() -> None:
    """Main function."""
    p_j, p_k = next(_get_special_sorted_pentagonal_number_pairs())
    print(f'The value of D = |P_k − P_j| is {p_k - p_j:,}, with P_k = {p_j:,} and P_j = {p_k:,}.')


if __name__ == '__main__':
    main()
